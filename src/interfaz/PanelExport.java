package interfaz;

import lectura_escritura.Conexion;
import datos.ElementoLista;
import lectura_escritura.GeneradorExcel;
import formatoTablas.FormatoTabla;
import java.awt.event.ItemEvent;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker.StateValue;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;

/**
 * Crea una nueva forma PanelExport que contiene todos los elementos gráficos
 * y estructuras de datos necesarias para convertir una base de datos en un
 * archivo de Excel.
 * @author Geny
 * @version 1.1
 */
public class PanelExport extends javax.swing.JPanel {
    private JFrame ventana;     // Ventana sobre la que corre el programa
    private JPanel panel;       // Panel contenedor del panel de exportación
    private int indiceBaseAct;  // Índice de la tabla que se está mostrando en pantalla
    private boolean cambioCancelado; 
    private ArrayList<ElementoLista> listaElementos; // estructura que representa a las tablas de la BD 
    private DefaultListModel modeloLista; // modelo que contiene a los elementos seleccionados en la lista de exportación
    private GeneradorExcel generadorArch; // objeto encargado de crear el archivo de Excel
    private Conexion conn;                // conexión que muestra los datos de la BD
    private FormatoTabla formato;         // formato de la tabla en donde se muestran los datos
    private Reporte reporte;
    
    /**
     * Crea una nueva forma PanelExport.
     * @param frame Ventana padre del programa.
     * @param panel Panel sobre el que se va a mostrar la forma de exportación.
     */
    public PanelExport(JFrame frame, JPanel panel) {
        initComponents();
        ventana = frame;
        this.panel = panel;
        modeloLista = new DefaultListModel();
        jListTablas.setModel(modeloLista);
        indiceBaseAct = 0;
        listaElementos = new ArrayList<>();
        cambioCancelado = false;
        generadorArch = new GeneradorExcel();
        conn = null;
        formato = null;
        reporte = new Reporte(ventana,true); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoOpc = new javax.swing.ButtonGroup();
        panelExport = new javax.swing.JPanel();
        comboBases = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        tituloBase = new javax.swing.JLabel();
        comboTablas = new javax.swing.JComboBox();
        tituloTabla = new javax.swing.JLabel();
        panelOpciones = new javax.swing.JPanel();
        contenedorLista = new javax.swing.JPanel();
        jScrollPaneSel = new javax.swing.JScrollPane();
        jListTablas = new javax.swing.JList();
        btnQuitar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        opTablasSel = new javax.swing.JRadioButton();
        opcTablasCompletas = new javax.swing.JRadioButton();
        btnExportar = new javax.swing.JButton();
        barraProgreso = new javax.swing.JProgressBar();
        labelInfo = new javax.swing.JLabel();
        titulo = new javax.swing.JLabel();
        panelBtnAgregar = new javax.swing.JPanel();
        btnAgregarTabla = new javax.swing.JButton();
        tituloOpciones = new javax.swing.JLabel();
        panelRegistros = new javax.swing.JPanel();
        labelRegistros = new javax.swing.JLabel();
        separador = new javax.swing.JSeparator();
        btnReporte = new javax.swing.JButton();

        panelExport.setBackground(new java.awt.Color(255, 255, 255));

        comboBases.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBasesItemStateChanged(evt);
            }
        });
        comboBases.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboBasesMouseClicked(evt);
            }
        });

        jScrollPane1.setToolTipText("");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabla.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabla.setDragEnabled(true);
        tabla.setGridColor(new java.awt.Color(204, 204, 204));
        tabla.setOpaque(false);
        tabla.setSelectionBackground(new java.awt.Color(2, 97, 140));
        tabla.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tabla.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabla);

        tituloBase.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        tituloBase.setText("Base de datos");

        comboTablas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboTablasItemStateChanged(evt);
            }
        });

        tituloTabla.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        tituloTabla.setText("Tablas");

        panelOpciones.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPaneSel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPaneSel.setEnabled(false);

        jListTablas.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jListTablas.setEnabled(false);
        jListTablas.setSelectionBackground(new java.awt.Color(2, 97, 140));
        jListTablas.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPaneSel.setViewportView(jListTablas);

        javax.swing.GroupLayout contenedorListaLayout = new javax.swing.GroupLayout(contenedorLista);
        contenedorLista.setLayout(contenedorListaLayout);
        contenedorListaLayout.setHorizontalGroup(
            contenedorListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorListaLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPaneSel, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        contenedorListaLayout.setVerticalGroup(
            contenedorListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneSel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
        );

        btnQuitar.setText("Quitar tabla(s)");
        btnQuitar.setEnabled(false);
        btnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarActionPerformed(evt);
            }
        });

        btnBorrar.setText("Borrar todo");
        btnBorrar.setEnabled(false);
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        opTablasSel.setBackground(new java.awt.Color(255, 255, 255));
        grupoOpc.add(opTablasSel);
        opTablasSel.setText("Exportar sólo las tablas seleccionadas");
        opTablasSel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opTablasSelActionPerformed(evt);
            }
        });

        opcTablasCompletas.setBackground(new java.awt.Color(255, 255, 255));
        grupoOpc.add(opcTablasCompletas);
        opcTablasCompletas.setSelected(true);
        opcTablasCompletas.setLabel("Exportar todas las tablas de la base");
        opcTablasCompletas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcTablasCompletasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelOpcionesLayout = new javax.swing.GroupLayout(panelOpciones);
        panelOpciones.setLayout(panelOpcionesLayout);
        panelOpcionesLayout.setHorizontalGroup(
            panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOpcionesLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contenedorLista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelOpcionesLayout.createSequentialGroup()
                        .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnQuitar, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                    .addGroup(panelOpcionesLayout.createSequentialGroup()
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(opcTablasCompletas)
                            .addComponent(opTablasSel))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelOpcionesLayout.setVerticalGroup(
            panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOpcionesLayout.createSequentialGroup()
                .addComponent(opcTablasCompletas)
                .addGap(0, 0, 0)
                .addComponent(opTablasSel)
                .addGap(0, 0, 0)
                .addComponent(contenedorLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnQuitar)
                    .addComponent(btnBorrar))
                .addGap(0, 0, 0))
        );

        btnExportar.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        barraProgreso.setToolTipText("");
        barraProgreso.setFocusable(false);
        barraProgreso.setStringPainted(true);

        labelInfo.setBackground(new java.awt.Color(255, 255, 255));
        labelInfo.setText("Progreso de exportación");

        titulo.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        titulo.setText("Exportar tablas de MySQL a Excel");

        btnAgregarTabla.setText("Seleccionar tabla");
        btnAgregarTabla.setEnabled(false);
        btnAgregarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarTablaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBtnAgregarLayout = new javax.swing.GroupLayout(panelBtnAgregar);
        panelBtnAgregar.setLayout(panelBtnAgregarLayout);
        panelBtnAgregarLayout.setHorizontalGroup(
            panelBtnAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBtnAgregarLayout.createSequentialGroup()
                .addComponent(btnAgregarTabla)
                .addContainerGap(243, Short.MAX_VALUE))
        );
        panelBtnAgregarLayout.setVerticalGroup(
            panelBtnAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnAgregarTabla)
        );

        tituloOpciones.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        tituloOpciones.setText("Opciones de exportación");

        labelRegistros.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelRegistros.setText("Buscando registros...");

        javax.swing.GroupLayout panelRegistrosLayout = new javax.swing.GroupLayout(panelRegistros);
        panelRegistros.setLayout(panelRegistrosLayout);
        panelRegistrosLayout.setHorizontalGroup(
            panelRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRegistrosLayout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(labelRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelRegistrosLayout.setVerticalGroup(
            panelRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRegistrosLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(labelRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/reporte.png"))); // NOI18N
        btnReporte.setToolTipText("Reporte de importación");
        btnReporte.setEnabled(false);
        btnReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelExportLayout = new javax.swing.GroupLayout(panelExport);
        panelExport.setLayout(panelExportLayout);
        panelExportLayout.setHorizontalGroup(
            panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelExportLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelExportLayout.createSequentialGroup()
                        .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelExportLayout.createSequentialGroup()
                                    .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tituloBase)
                                        .addComponent(tituloTabla))
                                    .addGap(61, 61, 61)
                                    .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(comboBases, 0, 357, Short.MAX_VALUE)
                                        .addComponent(comboTablas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(panelExportLayout.createSequentialGroup()
                                    .addComponent(panelBtnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(0, 0, 0)
                                    .addComponent(panelRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(titulo))
                        .addGap(24, 24, 24)
                        .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tituloOpciones)
                            .addComponent(btnExportar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelOpciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(separador, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelExportLayout.createSequentialGroup()
                        .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelExportLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(labelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(barraProgreso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addComponent(btnReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        panelExportLayout.setVerticalGroup(
            panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelExportLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titulo)
                    .addComponent(tituloOpciones))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelExportLayout.createSequentialGroup()
                        .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tituloBase))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tituloTabla)
                            .addComponent(comboTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelOpciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelBtnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExportar)
                    .addComponent(panelRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(separador, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelExportLayout.createSequentialGroup()
                        .addComponent(labelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(barraProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnReporte))
                .addGap(50, 50, 50))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 937, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 1, Short.MAX_VALUE)
                    .addComponent(panelExport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 1, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 585, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panelExport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método para obtener el botón que permite iniciar la exportación de la 
     * base de datos.
     * @return Objeto JButton que inicia el proceso de exportación.
     */
    public JButton getBtnExportar() {
        return btnExportar;
    }

    /**
     * Devuelve el botón que permite visualizar los eventos ocurridos durante la
     * creación del archivo Excel.
     * @return Objeto JButton que muestra el reporte de exportación.
     */
    public JButton getBtnReporte() {
        return btnReporte;
    }

    /**
     * Método que devuelve la ventana que contiene al reporte de exportación.
     * @return Objeto de tipo Reporte.
     */
    public Reporte getReporte() {
        return reporte;
    }

    /**
     * 
     * @return 
     */
    public JLabel getLabelInfo() {
        return labelInfo;
    }

    /**
     * Método que permite obtener la barra donde se muestra el progreso de 
     * exportación de la base de datos.
     * @return objeto JProgressBar del proceso de exportación. 
     */
    public JProgressBar getBarraProgreso() {
        return barraProgreso;
    }

    /**
     * Método que devuelve la ventana princial sobre la que se ejecuta todo el
     * programa.
     * @return Objeto JFrame principal del programa.
     */
    public JFrame getVentana() {
        return ventana;
    }
    
    /**
     * Método que comprueba si la tabla seleccionada está agregada a la lista de
     * exportación. Si no lo está, la agrega y habilita los botones para eliminar
     * elementos y realizar la exportación. Si la tabla ya está en la lista, no
     * se realiza ninguna acción.
     * @param evt Evento lanzado al hacer clic sobre el botón que permite agregar
     * una tabla a lista de exportación.
     */
    private void btnAgregarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarTablaActionPerformed
        if(!listaElementos.get(comboTablas.getSelectedIndex()).estaSeleccionado()){
            // añadir el nuevo elemento al jList
            modeloLista.addElement(new ElementoLista(comboTablas.getSelectedItem().toString(),comboTablas.getSelectedIndex()));
            // seleccionar el último elemento del jList
            jListTablas.setSelectedIndex(modeloLista.getSize()-1);
            // marcar la tabla como seleccionada en la estructura de datos
            listaElementos.get(comboTablas.getSelectedIndex()).setSeleccionado(true);
            // Principal.mostrarListaElementos();
            btnQuitar.setEnabled(true);
            btnBorrar.setEnabled(true);
            btnAgregarTabla.setEnabled(false);
            btnExportar.setEnabled(true);
        }
    }//GEN-LAST:event_btnAgregarTablaActionPerformed

    /**
     * Método que permite iniciar o detener la creación de un archivo de Excel
     * dependiendo del estado del proceso (si se está ejecutando o no) al 
     * presionar el botón correspondiente.
     * @param evt Evento lanzado al prsionar el boton 'Exportar'
     */
    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        if(generadorArch.getState()==StateValue.STARTED){
            generadorArch.cancel(true); // cancelar la ejecución del swingWorker
            labelInfo.setText("Cancelando la exportación de la base de datos...");
        }else{ // StateValue.PENDING || StateValue.DONE
            guardarArchivo();
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    /**
     * Configura los elementos de la interfaz cuando el usuario selecciona la
     * opción que permite exportar todas las tablas de la base de datos.
     * Deshabilita el uso de la lista de selección y los botones que permiten 
     * agregar y eliminar elementos a la misma.
     * @param evt Evento lanzado al seleccionar la opción que permite exportar
     * todas las tablas.
     */
    private void opcTablasCompletasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcTablasCompletasActionPerformed
        btnQuitar.setEnabled(false);
        btnBorrar.setEnabled(false);
        btnAgregarTabla.setEnabled(false);
        jListTablas.setEnabled(false);
        jScrollPaneSel.getVerticalScrollBar().setEnabled(false);
        btnExportar.setEnabled(true);
    }//GEN-LAST:event_opcTablasCompletasActionPerformed

    /**
     * Configura los elementos de la interfaz cuando el usuario selecciona la
     * opción que permite exportar solo las tablas seleccionadas.
     * Habilita el uso de la lista de selección y los botones que permiten 
     * agregar y eliminar elementos a la misma.
     * @param evt Evento lanzado al seleccionar la opción que permite exportar
     * solo las tablas que se encuentren en la lista de exportación.  
     */
    private void opTablasSelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opTablasSelActionPerformed
        jListTablas.setEnabled(true);
        jScrollPaneSel.getVerticalScrollBar().setEnabled(true);
        // Verificar si la tabla que se está mostrando está seleccionada en la lista
        if(listaElementos.get(comboTablas.getSelectedIndex()).estaSeleccionado())
            btnAgregarTabla.setEnabled(false);
        else
            btnAgregarTabla.setEnabled(true);
        // Verificar si la lista de exportación contiene elementos
        if(modeloLista.isEmpty()){
            btnQuitar.setEnabled(false);
            btnBorrar.setEnabled(false);
            btnExportar.setEnabled(false);
        }else{
            btnQuitar.setEnabled(true);
            btnBorrar.setEnabled(true);
            btnExportar.setEnabled(true);
        }
    }//GEN-LAST:event_opTablasSelActionPerformed

    /**
     * Método que permite eliminar todos los elementos seleccionados para 
     * exportarse al hacer clic sobre el botón.
     * @param evt Evento lanzado al hacer clic sobre el botón que permite borrar
     * todos los elementos de la lista de exportación.
     */
    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        if(Principal.limpiarSeleccion(panel,"tablas",modeloLista,listaElementos) == JOptionPane.OK_OPTION){
            //Principal.mostrarListaElementos(listaElementos);
            btnAgregarTabla.setEnabled(true);
            btnExportar.setEnabled(false);
            btnBorrar.setEnabled(false);
            btnQuitar.setEnabled(false);
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    /**
     * Método que permite eliminar los elementos seleccionados por el usuario 
     * en la lista de exportación al hacer clic en el botón.
     * @param evt Evento lanzado al hacer clic sobre el botón que permite borrar
     * los elementos.
     */
    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed
        Principal.borrarElemento(jListTablas,modeloLista,listaElementos);
        //Principal.mostrarListaElementos(listaElementos);
        // Revisar si la tabla que se se está mostrando está en la lista de exportación
        if(!listaElementos.get(comboTablas.getSelectedIndex()).estaSeleccionado())
            btnAgregarTabla.setEnabled(true);
        // Deshabilitar botones si la lista está vacía
        if(modeloLista.isEmpty()){
            btnQuitar.setEnabled(false);
            btnBorrar.setEnabled(false);
            btnExportar.setEnabled(false);
        }
    }//GEN-LAST:event_btnQuitarActionPerformed

    /**
     * Detecta el evento cuando se cambia el item en la lista de tablas. Al
     * cambiar de tabla, se actualizan los datos en pantalla y se comprueba si 
     * el botón que permite añadir elementos a la lista debe habilitarse o no.
     * @param evt Evento lanzado al seleccionar un nuevo elemento de la lista de
     * tablas.
     */
    private void comboTablasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboTablasItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED){
            cargarDatos(comboBases.getSelectedItem().toString(),comboTablas.getSelectedItem().toString());
            if(opTablasSel.isSelected()){
                if(listaElementos.get(comboTablas.getSelectedIndex()).estaSeleccionado())
                    btnAgregarTabla.setEnabled(false); // deshabilitar el boton si la tabla actual está en la lista
                else
                    btnAgregarTabla.setEnabled(true);
            }
        }
    }//GEN-LAST:event_comboTablasItemStateChanged

    /**
     * Reinicia el valor de la variable auxiliar cuando el usuario quiere cambiar 
     * de base de datos pero canceló otro cambio antes.
     * @param evt evento lanzado al hacer clic sobre el combo con los nombres
     * de las bases de datos
     */
    private void comboBasesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboBasesMouseClicked
        cambioCancelado = false;
    }//GEN-LAST:event_comboBasesMouseClicked

    /**
     * Define el comportamiento de los elementos de la interfaz de exportación
     * cuando el usuario cambia la selección del jComboBox, escogiendo un nombre
     * de base de datos distinto.
     * @param evt evento lanzado al cambiar el elemento seleccionado en el jComboBox. 
     */
    private void comboBasesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBasesItemStateChanged
        if(modeloLista.isEmpty()){
            // Si no hay tablas seleccionadas, solo se reinician los campos
            // y se cargan los nombres de las tablas de la nueva base de datos
            // seleccionada.
            if(evt.getStateChange()==ItemEvent.SELECTED){
                cargarListaDeTablas(comboBases.getSelectedItem().toString());
                opcTablasCompletas.setSelected(true);
                btnAgregarTabla.setEnabled(false);
                btnExportar.setEnabled(true);
                indiceBaseAct = comboBases.getSelectedIndex();
            }else{
                comboTablas.removeAllItems();
            }
        }else{
            // Si hay tablas seleccionadas, se muestra un cuadro de diálogo donde
            // se solicita confirmar el cambio de base de datos. Si el cambio se
            // confirma, se reinician los elementos y se cargan los nombres de
            // las tablas de la nueva base de datos. Si el cambio se cancela, se
            // utiliza la variable auxiliar cambioCancelado para evitar que la
            // ventana de confirmación aparezca dos veces cuando se selecciona
            // de nuevo la base de datos previa(*).
            if(!cambioCancelado){
                if(evt.getStateChange()==ItemEvent.SELECTED){
                    comboBases.hidePopup();
                    if(Principal.limpiarSeleccion(panel,"tablas",modeloLista,listaElementos)==JOptionPane.OK_OPTION){
                        comboTablas.removeAllItems();
                        opcTablasCompletas.setSelected(true);
                        btnAgregarTabla.setEnabled(false);
                        btnBorrar.setEnabled(false);
                        btnQuitar.setEnabled(false);
                        cargarListaDeTablas(comboBases.getSelectedItem().toString());
                        indiceBaseAct = comboBases.getSelectedIndex();
                    }else{
                        cambioCancelado = true;
                        comboBases.setSelectedIndex(indiceBaseAct); //(*)
                    }
                }
            }
        }
    }//GEN-LAST:event_comboBasesItemStateChanged

    private void btnReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteActionPerformed
        reporte.setVisible(true);
    }//GEN-LAST:event_btnReporteActionPerformed

    /**
     * Método que obtiene los nombres de las bases de datos en el servidor y los
     * añade al jComboBox correspondiente. Si ocurre un error al realizar la
     * consulta, se muestra un mensaje con la descripción de lo que ocurrió.
     * @param con Conexión con la base de datos.
     */
    public void cargarListaDeBases(Conexion con){
        conn = con;
        try{
            ArrayList<String> lista = conn.obtenerBasesDeDatos();
            lista.stream().forEach((String nomBase) -> {
                comboBases.addItem(nomBase);
            });
        }catch(SQLException e){
            labelInfo.setText("No se pudo cargar la información del servidor "
            + "(Error MySQL " + e.getErrorCode() + ": " + e.getMessage() + ".");
        }catch(Exception ex){
            labelInfo.setText("No se pudo cargar la información del servidor ("+ex.getMessage()+")");
            //ex.printStackTrace();
        }
    }
    
    /**
     * Método que añade al jComboBox correspondiente los nombres de las tablas
     * de la base de datos seleccionada. Inicializa la estructura de datos que
     * lleva la información de los elementos que se van a exportar.
     * @param nomBase nombre de la base de datos
     */
    public void cargarListaDeTablas(String nomBase){
        try{
            listaElementos = conn.obtenerTablas(nomBase);
            if(listaElementos.isEmpty())
                tabla.setModel(new DefaultTableModel());
            listaElementos.stream().forEach(
                new Consumer<ElementoLista>(){
                    @Override
                    public void accept(ElementoLista e1) {
                        comboTablas.addItem(e1.getNombre());
                    }
                }
            );
        }catch(SQLException e){
            labelInfo.setText("No se pudo cargar la información "
            + "(Error MySQL " + e.getErrorCode() + ": " + e.getMessage() + ".");
        }catch(Exception ex){
            labelInfo.setText("No se pudo cargar la lista de tablas en la base de datos "
            + comboBases.getSelectedItem()+" ("+ex.toString()+")");
            //ex.printStackTrace();
        }
    }
    
    /**
     * Método que muestra en pantalla los datos de una tabla determinada.
     * @param nomBase Nombre de la base de datos en donde se encuentra la tabla.
     * @param nomTabla Nombre de la tabla.
     */
    private void cargarDatos(String nomBase,String nomTabla){
        try{
            formato = new FormatoTabla(tabla,conn,nomBase,nomTabla,labelRegistros);
            formato.execute();
        }catch(SQLException e){
            labelInfo.setText("No se pudo cargar la información "
            + "(Error MySQL " + e.getErrorCode() + ": " + e.getMessage() + ".");
        }catch(Exception ex){
            labelInfo.setText("No fue posible cargar los registros de la tabla "
                +comboTablas.getSelectedItem()+" ("+ex.toString()+")");
            //ex.printStackTrace();
        }
    }
    
    /**
     * Método encargado de inicializar todos los componentes necesarios para
     * crear el archivo de Excel utilizando la base de datos seleccionada y sus
     * tablas marcadas.
     */
    private void guardarArchivo(){ 
        List<ElementoLista> lista; // lista definitiva de tablas que se van a exportar
        String directorio; // directorio por defecto del usuario
        try {
            String nombreBD = comboBases.getSelectedItem().toString(); 
            // Crear una nueva conexión utilizada para crear el archivo de Excel
            Conexion con2 = conn.crearNuevaConexion();
            if(opcTablasCompletas.isSelected()){
                lista = listaElementos; 
            }else{
                lista = listaElementos.stream()
                    .filter(elemento->elemento.estaSeleccionado())
                    .collect(Collectors.toList());
            }
            // Inicializar el objeto que va a crear el archivo de Excel
            generadorArch = new GeneradorExcel(con2,nombreBD,lista,this);
            directorio = FileSystemView.getFileSystemView().getDefaultDirectory().getPath();
            // Instanciar y mostrar la ventana de selección de archivos
            SelectorGuarda sg = new SelectorGuarda(new File(directorio+"\\"+nombreBD+".xlsx"),generadorArch);
            sg.showSaveDialog(panel);
        } catch (ClassNotFoundException ex) {
            labelInfo.setText("No se pudo encontar la librería mysql-conector-java...");
        } catch (SQLException ex) {
            labelInfo.setText("No se pudo cargar la información del servidor "
            + "(Error MySQL " + ex.getErrorCode() + ": " + ex.getMessage() + ".");
        }
    }
    
    /**
     * Reinicia los estados de los botones y los demás elementos de la interfaz
     * de exportación a su estado predefinido.
     */
    public void reiniciarElementosExp(){
        comboBases.removeAllItems();
        comboTablas.removeAllItems();
        opcTablasCompletas.setSelected(true);
        modeloLista.clear();
        tabla.setModel(new DefaultTableModel());
        btnBorrar.setEnabled(false);
        btnQuitar.setEnabled(false);
        btnAgregarTabla.setEnabled(false);
        labelInfo.setText("Progreso de exportación");
        barraProgreso.setValue(0);
        btnReporte.setEnabled(false);
        
        listaElementos.clear();
        cambioCancelado = false;
        indiceBaseAct = 0; 
    }
    
    /**
     * Método que permite conocer el estado del proceso encargado de crear el 
     * archivo.
     * @return Estado del proceso (StateValue.PENDING, StateValue.STARTED, 
     * StateValue.DONE).
     */
    public StateValue consultarEstadoProceso(){
        return generadorArch.getState();
    }
    
    /**
     * Método que interrumpe la creación del archivo.
     * @return valor booleano que indica si el proceso puede ser cancelado o no.
     */
    public boolean cancelarProceso(){
        return generadorArch.cancel(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barraProgreso;
    private javax.swing.JButton btnAgregarTabla;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JButton btnReporte;
    private javax.swing.JComboBox comboBases;
    private javax.swing.JComboBox comboTablas;
    private javax.swing.JPanel contenedorLista;
    private javax.swing.ButtonGroup grupoOpc;
    private javax.swing.JList jListTablas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneSel;
    private javax.swing.JLabel labelInfo;
    private javax.swing.JLabel labelRegistros;
    private javax.swing.JRadioButton opTablasSel;
    private javax.swing.JRadioButton opcTablasCompletas;
    private javax.swing.JPanel panelBtnAgregar;
    private javax.swing.JPanel panelExport;
    private javax.swing.JPanel panelOpciones;
    private javax.swing.JPanel panelRegistros;
    private javax.swing.JSeparator separador;
    private javax.swing.JTable tabla;
    private javax.swing.JLabel titulo;
    private javax.swing.JLabel tituloBase;
    private javax.swing.JLabel tituloOpciones;
    private javax.swing.JLabel tituloTabla;
    // End of variables declaration//GEN-END:variables
}
