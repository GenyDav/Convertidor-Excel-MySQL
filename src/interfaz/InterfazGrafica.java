/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import datos.InfoColumna;
import conexion.Conexion;
import excel.GeneradorExcel;
import excel.LectorExcel;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.SwingWorker.StateValue;
import javax.swing.UIManager;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Geny
 */
public class InterfazGrafica extends javax.swing.JFrame {
    private CardLayout cardLayout,cardLayout2;
    private String servidor;        // dirección o nombre del servidor de bases de datos
    private String usuario;         // nombre del usuario
    private String clave;           // contraseña para acceder al servidor
    private Conexion conn;          // encargado de realizar la conexión y consultas a la base de datos
    private String mensaje;         // mensaje de la pantalla de inicio
    private int modo;               // 
    private final int EXP;
    private final int IMP;
    
    private FormatoTabla formato;   // formato de la tabla en donde se muestran los datos
    private FormatoTablaExcel formatoExcel;
    
    private GeneradorExcel generadorArch;
    private GeneradorBD genBD;
    
    private DefaultListModel modeloLista;
    private ArrayList<ElementoLista> listaElementos;
    
    private int indiceTablaAct;     // variable para el cambio de base de datos
    private boolean cambioCancelado;
    
    // Atributos para leer archivo de Excel
    private String nomArch;
    private String rutaArch;
    private LectorExcel lector;
 
    private ArrayList<TablaLista> listaHojas;
    private DefaultListModel modeloListaExcel;
    
    // Atributos para crear la base de datos
    String expNombre = "(_+|[a-zA-Z]+|(\\d*[a-zA-Z]+))(\\w*)"; // verificar que se introduce un nombre válido para la BD
    Pattern patron = Pattern.compile(expNombre);
    Matcher mat;
    
    Reporte rep;
    
    public InterfazGrafica() {
        UIManager.put("ProgressBar.selectionForeground", Color.white);
        UIManager.put("ProgressBar.foreground", new Color(2,97,140));//255,148,0
        
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/icono_frame.png")).getImage());
        setResizable(false);
        setTitle("Convertidor MySQL/Excel");
        setSize(1000,600);
        setLocationRelativeTo(null);
        
        jScrollPaneSel.getVerticalScrollBar().setEnabled(false);
        
        cardLayout = (CardLayout)jPanel1.getLayout();
        cardLayout2 = (CardLayout)jPanel7.getLayout();
        //Imagen imagen = new Imagen("/imagenes/img_inicio.png");
        //jPanel6.add(imagen);
        //jPanel6.repaint();
        
        servidor = "";
        usuario = "";
        clave = "";
        mensaje = "";
       
        EXP = 1;
        IMP = 2;
        modo = EXP;
        
        tabla.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); // mostrar barra de desplazamiento horizontal
        tablaExcel.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        formato = null;
        formatoExcel = null;
        
        generadorArch = new GeneradorExcel();
        genBD = new GeneradorBD();
        
        modeloLista = new DefaultListModel();
        seleccionTablas.setModel(modeloLista);
        
        listaElementos = new ArrayList<>();
                
        indiceTablaAct = 0;
        cambioCancelado = false;
        
        // Inicialización de variables para leer archivoExcel
        nomArch = "";
        rutaArch = "";
        lector = null;

        listaHojas = new ArrayList<>();
        modeloListaExcel = new DefaultListModel();
        seleccionHojasExcel.setModel(modeloListaExcel);
        
        rep = new Reporte(this,true); 
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        txtServidor = new javax.swing.JTextField();
        txtClave = new javax.swing.JPasswordField();
        btnConectar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        msj = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        guardar_excel = new javax.swing.JButton();
        guardar_bd = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        panelExport = new javax.swing.JPanel();
        comboBases = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        comboTablas = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jScrollPaneSel = new javax.swing.JScrollPane();
        seleccionTablas = new javax.swing.JList();
        btnQuitar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        tablasSel = new javax.swing.JRadioButton();
        tablasCompletas = new javax.swing.JRadioButton();
        btnExportar = new javax.swing.JButton();
        barraProgreso = new javax.swing.JProgressBar();
        info = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        btnAgregarTabla = new javax.swing.JButton();
        labelSelTabla = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        labelRegistros = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        panelImport = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaExcel = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        comboHojas = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jScrollPaneSel1 = new javax.swing.JScrollPane();
        seleccionHojasExcel = new javax.swing.JList();
        btnQuitarExcel = new javax.swing.JButton();
        btnBorrarExcel = new javax.swing.JButton();
        tablasSelExcel = new javax.swing.JRadioButton();
        tablasCompletasExcel = new javax.swing.JRadioButton();
        btnImportar = new javax.swing.JButton();
        barraProgresoImport = new javax.swing.JProgressBar();
        infoImport = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        btnAgregarHoja = new javax.swing.JButton();
        labelSelTablaExcel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        labelRegExcel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        btnAbrir = new javax.swing.JButton();
        btnTipos = new javax.swing.JButton();
        labelArchivo = new javax.swing.JLabel();
        btnReporte = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                cerrarVentana(evt);
            }
        });

        jPanel1.setLayout(new java.awt.CardLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setForeground(new java.awt.Color(102, 102, 102));

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 102)));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setMaximumSize(new java.awt.Dimension(265, 364));
        jPanel2.setName(""); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Nombre de usuario");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Dirección del servidor");

        jLabel8.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Contraseña");

        txtUsuario.setText("root");
        txtUsuario.setAutoscrolls(false);
        txtUsuario.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        txtUsuario.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        txtServidor.setText("localhost");
        txtServidor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));

        txtClave.setText("root");
        txtClave.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));

        btnConectar.setText("Conectar");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Datos de conexión");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(btnConectar, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                    .addComponent(txtClave)
                    .addComponent(jLabel5)
                    .addComponent(txtServidor)
                    .addComponent(txtUsuario)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 305, Short.MAX_VALUE)
                .addComponent(btnConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        msj.setEditable(false);
        msj.setColumns(20);
        msj.setLineWrap(true);
        msj.setRows(4);
        msj.setWrapStyleWord(true);
        msj.setFocusable(false);
        msj.setRequestFocusEnabled(false);
        jScrollPane3.setViewportView(msj);

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/panel.png"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel13))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(47, 47, 47)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        jPanel1.add(jPanel3, "card2");

        jPanel4.setBackground(new java.awt.Color(152, 152, 152));

        jPanel5.setBackground(new java.awt.Color(51, 51, 51));
        jPanel5.setForeground(new java.awt.Color(255, 255, 255));

        guardar_excel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/btn1.png"))); // NOI18N
        guardar_excel.setToolTipText("Convertir una base de datos en un archivo de Excel");
        guardar_excel.setBorder(null);
        guardar_excel.setBorderPainted(false);
        guardar_excel.setContentAreaFilled(false);
        guardar_excel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        guardar_excel.setDefaultCapable(false);
        guardar_excel.setFocusPainted(false);
        guardar_excel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnExportarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnExportarMouseExited(evt);
            }
        });
        guardar_excel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_excelActionPerformed(evt);
            }
        });

        guardar_bd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/btn2.png"))); // NOI18N
        guardar_bd.setToolTipText("Crear una base de datos desde un archivo de Excel");
        guardar_bd.setBorder(null);
        guardar_bd.setBorderPainted(false);
        guardar_bd.setContentAreaFilled(false);
        guardar_bd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        guardar_bd.setDefaultCapable(false);
        guardar_bd.setFocusPainted(false);
        guardar_bd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnImportMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnImportMouseExited(evt);
            }
        });
        guardar_bd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_bdActionPerformed(evt);
            }
        });

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/salir1.png"))); // NOI18N
        btnSalir.setToolTipText("Cerrar la conexión");
        btnSalir.setBorderPainted(false);
        btnSalir.setContentAreaFilled(false);
        btnSalir.setDefaultCapable(false);
        btnSalir.setFocusPainted(false);
        btnSalir.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/salir3.png"))); // NOI18N
        btnSalir.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/salir2.png"))); // NOI18N
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(guardar_bd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guardar_excel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(guardar_excel)
                .addGap(0, 0, 0)
                .addComponent(guardar_bd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 406, Short.MAX_VALUE)
                .addComponent(btnSalir)
                .addGap(5, 5, 5))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setMaximumSize(new java.awt.Dimension(944, 600));
        jPanel7.setLayout(new java.awt.CardLayout());

        panelExport.setBackground(new java.awt.Color(255, 255, 255));

        comboBases.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBasesItemStateChanged(evt);
            }
        });
        comboBases.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboBasesMouseClicked(evt);
            }
        });

        jScrollPane1.setToolTipText("");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabla.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tabla.setDragEnabled(true);
        tabla.setGridColor(new java.awt.Color(204, 204, 204));
        tabla.setOpaque(false);
        tabla.setSelectionBackground(new java.awt.Color(2, 97, 140));
        tabla.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tabla.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabla);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Base de datos");

        comboTablas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboTablasItemStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Tablas");

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPaneSel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPaneSel.setEnabled(false);

        seleccionTablas.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        seleccionTablas.setEnabled(false);
        seleccionTablas.setSelectionBackground(new java.awt.Color(2, 97, 140));
        seleccionTablas.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPaneSel.setViewportView(seleccionTablas);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPaneSel)
                .addGap(0, 0, 0))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneSel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
        );

        btnQuitar.setText("Quitar tabla(s)");
        btnQuitar.setEnabled(false);
        btnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarActionPerformed(evt);
            }
        });

        btnBorrar.setText("Borrar todo");
        btnBorrar.setEnabled(false);
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        tablasSel.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(tablasSel);
        tablasSel.setText("Exportar sólo las tablas seleccionadas");
        tablasSel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tablasSelActionPerformed(evt);
            }
        });

        tablasCompletas.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(tablasCompletas);
        tablasCompletas.setSelected(true);
        tablasCompletas.setLabel("Exportar todas las tablas de la base");
        tablasCompletas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tablasCompletasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnQuitar, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tablasCompletas)
                            .addComponent(tablasSel))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(tablasCompletas)
                .addGap(0, 0, 0)
                .addComponent(tablasSel)
                .addGap(0, 0, 0)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnQuitar)
                    .addComponent(btnBorrar))
                .addGap(0, 0, 0))
        );

        btnExportar.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        barraProgreso.setToolTipText("");
        barraProgreso.setFocusable(false);
        barraProgreso.setStringPainted(true);

        info.setBackground(new java.awt.Color(255, 255, 255));
        info.setText("Progreso de exportación");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel7.setText("Exportar tablas de MySQL a Excel");

        btnAgregarTabla.setText("Seleccionar tabla");
        btnAgregarTabla.setEnabled(false);
        btnAgregarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarTablaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addComponent(btnAgregarTabla)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelSelTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnAgregarTabla)
            .addComponent(labelSelTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel4.setText("Opciones de exportación");

        labelRegistros.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelRegistros.setText("Buscando registros...");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(labelRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(labelRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout panelExportLayout = new javax.swing.GroupLayout(panelExport);
        panelExport.setLayout(panelExportLayout);
        panelExportLayout.setHorizontalGroup(
            panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelExportLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelExportLayout.createSequentialGroup()
                        .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelExportLayout.createSequentialGroup()
                                    .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3))
                                    .addGap(61, 61, 61)
                                    .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(comboBases, 0, 357, Short.MAX_VALUE)
                                        .addComponent(comboTablas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(panelExportLayout.createSequentialGroup()
                                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(0, 0, 0)
                                    .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel7))
                        .addGap(24, 24, 24)
                        .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addComponent(btnExportar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(barraProgreso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelExportLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        panelExportLayout.setVerticalGroup(
            panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelExportLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelExportLayout.createSequentialGroup()
                        .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(comboTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExportar)
                    .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(info, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(barraProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        jPanel7.add(panelExport, "cardExport");

        panelImport.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane2.setToolTipText("");

        tablaExcel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablaExcel.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tablaExcel.setGridColor(new java.awt.Color(204, 204, 204));
        tablaExcel.setSelectionBackground(new java.awt.Color(2, 97, 140));
        tablaExcel.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaExcel);

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel9.setText("Archivo seleccionado");

        comboHojas.setEnabled(false);
        comboHojas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboHojasItemStateChanged(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel10.setText("Hojas");

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPaneSel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPaneSel1.setEnabled(false);

        seleccionHojasExcel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        seleccionHojasExcel.setEnabled(false);
        seleccionHojasExcel.setName(""); // NOI18N
        seleccionHojasExcel.setSelectionBackground(new java.awt.Color(2, 97, 140));
        seleccionHojasExcel.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPaneSel1.setViewportView(seleccionHojasExcel);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPaneSel1)
                .addGap(0, 0, 0))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneSel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
        );

        btnQuitarExcel.setText("Quitar hoja(s)");
        btnQuitarExcel.setEnabled(false);
        btnQuitarExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarExcelActionPerformed(evt);
            }
        });

        btnBorrarExcel.setText("Borrar todo");
        btnBorrarExcel.setEnabled(false);
        btnBorrarExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarExcelActionPerformed(evt);
            }
        });

        tablasSelExcel.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(tablasSelExcel);
        tablasSelExcel.setText("Importar solo las hojas seleccionadas");
        tablasSelExcel.setEnabled(false);
        tablasSelExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tablasSelExcelActionPerformed(evt);
            }
        });

        tablasCompletasExcel.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(tablasCompletasExcel);
        tablasCompletasExcel.setSelected(true);
        tablasCompletasExcel.setText("Importar todas las hojas del archivo");
        tablasCompletasExcel.setEnabled(false);
        tablasCompletasExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tablasCompletasExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(btnBorrarExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnQuitarExcel, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tablasCompletasExcel)
                            .addComponent(tablasSelExcel))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(tablasCompletasExcel)
                .addGap(0, 0, 0)
                .addComponent(tablasSelExcel)
                .addGap(0, 0, 0)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnQuitarExcel)
                    .addComponent(btnBorrarExcel))
                .addGap(0, 0, 0))
        );

        btnImportar.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        btnImportar.setText("Crear base de datos");
        btnImportar.setEnabled(false);
        btnImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarActionPerformed(evt);
            }
        });

        barraProgresoImport.setToolTipText("");
        barraProgresoImport.setFocusable(false);
        barraProgresoImport.setStringPainted(true);

        infoImport.setBackground(new java.awt.Color(255, 255, 255));
        infoImport.setText("Progreso de importación");

        jLabel11.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel11.setText("Crear base de datos a partir de archivo Excel");

        btnAgregarHoja.setText("Seleccionar hoja");
        btnAgregarHoja.setEnabled(false);
        btnAgregarHoja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarHojaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addComponent(btnAgregarHoja)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelSelTablaExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnAgregarHoja)
            .addComponent(labelSelTablaExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel12.setText("Opciones de importación");

        labelRegExcel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelRegExcel.setText("Seleccione un archivo");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(labelRegExcel, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(labelRegExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnAbrir.setText("Abrir archivo");
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        btnTipos.setText("Cambiar tipos");
        btnTipos.setEnabled(false);
        btnTipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTiposActionPerformed(evt);
            }
        });

        labelArchivo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelArchivo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        btnReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/reporte.png"))); // NOI18N
        btnReporte.setToolTipText("Reporte de importación");
        btnReporte.setEnabled(false);
        btnReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelImportLayout = new javax.swing.GroupLayout(panelImport);
        panelImport.setLayout(panelImportLayout);
        panelImportLayout.setHorizontalGroup(
            panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImportLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelImportLayout.createSequentialGroup()
                        .addGroup(panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelImportLayout.createSequentialGroup()
                                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(0, 0, 0)
                                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel11)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelImportLayout.createSequentialGroup()
                                .addGroup(panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10))
                                .addGap(10, 10, 10)
                                .addGroup(panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboHojas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(6, 6, 6)
                                .addGroup(panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnTipos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAbrir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPane2))
                        .addGap(27, 27, 27)
                        .addGroup(panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel12)
                            .addComponent(btnImportar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelImportLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(infoImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelImportLayout.createSequentialGroup()
                        .addComponent(barraProgresoImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        panelImportLayout.setVerticalGroup(
            panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImportLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addGap(6, 6, 6)
                .addGroup(panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelImportLayout.createSequentialGroup()
                        .addGroup(panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(labelArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelImportLayout.createSequentialGroup()
                                .addComponent(btnTipos)
                                .addGap(9, 9, 9))
                            .addGroup(panelImportLayout.createSequentialGroup()
                                .addGroup(panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addGroup(panelImportLayout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(comboHojas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImportar)
                    .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(infoImport, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(panelImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(barraProgresoImport, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReporte))
                .addGap(50, 50, 50))
        );

        jPanel7.add(panelImport, "cardImport");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel4, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        Object []opciones = {"Aceptar","Cancelar"};
        new SwingWorker<Void,Void>(){
            @Override
            protected Void doInBackground() throws Exception {  
                if((generadorArch.getState()==StateValue.STARTED)||(genBD.getState()==StateValue.STARTED)){
                    int eleccion = JOptionPane.showOptionDialog(
                        null,
                        "Hay procesos ejecutándose, ¿desea cerrar la conexión?  ",
                        "Confirmar cierre",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,null,opciones,"Aceptar"
                    );
                    if (eleccion == JOptionPane.YES_OPTION){ 
                        generadorArch.cancel(true);
                        genBD.cancel(true);
                        terminarConexion();             
                    }
                }else{
                    terminarConexion();
                }
                return null;
            }
            /*
            @Override
            protected void process(List<String> lista) {
                for (String cad : lista) {
                    infoImport.setText("Estado: "+cad);
                }
            }*/
        }.execute();  
    }//GEN-LAST:event_btnSalirActionPerformed
    
    private void terminarConexion(){
        cardLayout.show(jPanel1, "card2");  
        cardLayout2.show(jPanel7, "cardExport");
        conn.terminarConexion();
        reiniciarCamposInicio();
        modo = 1;
        guardar_excel.setIcon(new ImageIcon(getClass().getResource("/imagenes/btn1.png")));
        guardar_bd.setIcon(new ImageIcon(getClass().getResource("/imagenes/btn2.png")));
        reiniciarElementosExportacion();
        reiniciarElementosImportacion();
    }
    
    private void reiniciarElementosExportacion(){
        comboBases.removeAllItems();
        comboTablas.removeAllItems();
        tablasCompletas.setSelected(true);
        modeloLista.clear();
        tabla.setModel(new DefaultTableModel());
        btnBorrar.setEnabled(false);
        btnQuitar.setEnabled(false);
        btnAgregarTabla.setEnabled(false);
        labelSelTabla.setText("");
        info.setText("Progreso de exportación");
        barraProgreso.setValue(0);
        
        listaElementos.clear();
        cambioCancelado = false;
        indiceTablaAct = 0;
    }
    
    private void reiniciarElementosImportacion(){                                                   
        labelArchivo.setText("");
        comboHojas.removeAllItems(); //
        comboHojas.setEnabled(false);//
        btnTipos.setEnabled(false);//
        tablasCompletasExcel.setSelected(true);//
        tablasCompletasExcel.setEnabled(false);//
        tablasSelExcel.setEnabled(false);//
        modeloListaExcel.clear();
        tablaExcel.setModel(new DefaultTableModel());// 
        btnAgregarHoja.setEnabled(false);//
        labelSelTablaExcel.setText("");
        labelRegExcel.setText("Seleccione un archivo");
        btnBorrarExcel.setEnabled(false);
        btnQuitarExcel.setEnabled(false);
        btnImportar.setEnabled(false);//
        barraProgresoImport.setValue(0);
        btnReporte.setEnabled(false);
        
        nomArch = "";
        rutaArch = "";
        listaHojas.clear();//
        //rep.getTextArea().setText("");
        if(lector!=null && lector.getLibro()!=null){
            lector.cerrarArchivo();
            lector = null;
        }  
        infoImport.setText("Progreso de importación");
    }
    
    private void tablasCompletasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tablasCompletasActionPerformed
        btnQuitar.setEnabled(false);
        btnBorrar.setEnabled(false);
        btnAgregarTabla.setEnabled(false);
        seleccionTablas.setEnabled(false);
        btnExportar.setEnabled(true);
        jScrollPaneSel.getVerticalScrollBar().setEnabled(false);
    }//GEN-LAST:event_tablasCompletasActionPerformed

    private void tablasSelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tablasSelActionPerformed
        if(listaElementos.get(comboTablas.getSelectedIndex()).getSeleccionado()){
            btnAgregarTabla.setEnabled(false);
        }else{
            btnAgregarTabla.setEnabled(true);
        }
        seleccionTablas.setEnabled(true);
        jScrollPaneSel.getVerticalScrollBar().setEnabled(true);
        if(modeloLista.isEmpty()){
            btnExportar.setEnabled(false);
        }else{
            btnExportar.setEnabled(true);
        }
    }//GEN-LAST:event_tablasSelActionPerformed

    /**
     * Detecta el evento cuando cambia el item de la tabla seleccionada
     * @param evt 
     */
    private void comboTablasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboTablasItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED){
            if(comboTablas.getItemCount()>0){
                cargarDatos(comboBases.getSelectedItem().toString(),comboTablas.getSelectedItem().toString());
            }
            labelSelTabla.setText("");
            if(tablasSel.isSelected()){
                if(listaElementos.get(comboTablas.getSelectedIndex()).getSeleccionado()){
                    btnAgregarTabla.setEnabled(false); // deshabilitar el boton si el elemento sel. está en la lista
                }else{
                    btnAgregarTabla.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_comboTablasItemStateChanged

    private void comboBasesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBasesItemStateChanged
        if(modeloLista.isEmpty()){
            tablasCompletas.setSelected(true);
            btnAgregarTabla.setEnabled(false);
            if(evt.getStateChange()==ItemEvent.SELECTED){
                cargarListaDeTablas(comboBases.getSelectedItem().toString());
                indiceTablaAct = comboBases.getSelectedIndex();
                labelSelTabla.setText("");
            }else{         
                comboTablas.removeAllItems();
            }
        }else{
            if(!cambioCancelado){
                if(evt.getStateChange()==ItemEvent.SELECTED){
                    comboBases.hidePopup();                  
                    if(limpiarSeleccion("tablas",modeloLista,
                        listaElementos,btnQuitar,btnBorrar,labelSelTabla)==0){
                        comboTablas.removeAllItems();
                        tablasCompletas.setSelected(true);
                        cargarListaDeTablas(comboBases.getSelectedItem().toString());
                        labelSelTabla.setText("");
                    }else{
                        cambioCancelado = true;
                        comboBases.setSelectedIndex(indiceTablaAct);             
                    }               
                }
            }
        }
        
    }//GEN-LAST:event_comboBasesItemStateChanged

    private void btnAgregarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarTablaActionPerformed
        if(!listaElementos.get(comboTablas.getSelectedIndex()).getSeleccionado()){            
            modeloLista.addElement(new ElementoLista(comboTablas.getSelectedItem().toString(),comboTablas.getSelectedIndex()));
            seleccionTablas.setSelectedIndex(modeloLista.getSize()-1);
            listaElementos.get(comboTablas.getSelectedIndex()).setSeleccionado(true);
            /*for(int i=0;i<listaElementos.size();i++){
                System.out.print("["+listaElementos.get(i).getSeleccionado()+"]");
            }System.out.println();*/
            labelSelTabla.setText("Tabla agregada a la lista de exportación");
            btnQuitar.setEnabled(true);
            btnBorrar.setEnabled(true);
        }   
        btnAgregarTabla.setEnabled(false);
        btnExportar.setEnabled(true);
    }//GEN-LAST:event_btnAgregarTablaActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        if(limpiarSeleccion("tablas",modeloLista,listaElementos,btnQuitar,btnBorrar,labelSelTabla)==JOptionPane.OK_OPTION){
            btnAgregarTabla.setEnabled(true);
            btnExportar.setEnabled(false);
        } 
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed
        borrarElemento(seleccionTablas,modeloLista,listaElementos,labelSelTabla,
            btnQuitar,btnBorrar,btnExportar,
            "Tabla borrada de la lista de exportación","Tablas borradas de la lista de exportación"
        );
        if(!listaElementos.get(comboTablas.getSelectedIndex()).getSeleccionado()){
            btnAgregarTabla.setEnabled(true);
        }
    }//GEN-LAST:event_btnQuitarActionPerformed

    private void comboBasesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboBasesMouseClicked
        cambioCancelado = false; // reiniciar el valor de la variable cuando el usuario
                                 // quiere cambiar de tabla pero canceló otro cambio antes
    }//GEN-LAST:event_comboBasesMouseClicked

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        if(btnExportar.getText().equals("Exportar")){
            guardarArchivo();
        }else{
            generadorArch.cancel(true);
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    private void guardar_bdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_bdActionPerformed
        modo = IMP;
        cardLayout2.show(jPanel7, "cardImport");
        jPanel4.setBackground(new Color(104,104,104));
    }//GEN-LAST:event_guardar_bdActionPerformed

    private void guardar_excelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_excelActionPerformed
        modo = EXP;
        cardLayout2.show(jPanel7, "cardExport");
        jPanel4.setBackground(new Color(153,153,153));
    }//GEN-LAST:event_guardar_excelActionPerformed

    private void comboHojasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboHojasItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED){
            if(tablasSelExcel.isSelected()){
                if(listaHojas.get(comboHojas.getSelectedIndex()).getSeleccionado()){
                    btnTipos.setEnabled(true);
                    btnAgregarHoja.setEnabled(false);
                }else{
                    btnTipos.setEnabled(false);
                    btnAgregarHoja.setEnabled(true);
                }
            }
            
            if(comboHojas.getItemCount()>0){
                formatoExcel = new FormatoTablaExcel(comboHojas.getSelectedIndex(),lector);
                formatoExcel.execute();
            }
            labelSelTablaExcel.setText("");
        }
    }//GEN-LAST:event_comboHojasItemStateChanged

    private void btnQuitarExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarExcelActionPerformed
        borrarElemento(seleccionHojasExcel,modeloListaExcel,listaHojas,labelSelTablaExcel,
            btnQuitarExcel,btnBorrarExcel,btnImportar,
            "Hoja borrada de la lista de importación","Hojas borradas de la lista de importación"
        );
        if(!listaHojas.get(comboHojas.getSelectedIndex()).getSeleccionado()){
            btnTipos.setEnabled(false);
            btnAgregarHoja.setEnabled(true);
        }
    }//GEN-LAST:event_btnQuitarExcelActionPerformed

    private void btnBorrarExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarExcelActionPerformed
        if(limpiarSeleccion("hojas",modeloListaExcel,listaHojas,btnQuitarExcel,btnBorrarExcel,labelSelTablaExcel)==JOptionPane.OK_OPTION){
            btnTipos.setEnabled(false);
            btnAgregarHoja.setEnabled(true);
            btnImportar.setEnabled(false);
        }
    }//GEN-LAST:event_btnBorrarExcelActionPerformed

    private void tablasSelExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tablasSelExcelActionPerformed
        seleccionHojasExcel.setEnabled(true); // lista con los elementos
        jScrollPaneSel1.getVerticalScrollBar().setEnabled(true);
        if(listaHojas.get(comboHojas.getSelectedIndex()).getSeleccionado()){
            btnTipos.setEnabled(true);
            btnAgregarHoja.setEnabled(false);
        }else{
            btnTipos.setEnabled(false);
            btnAgregarHoja.setEnabled(true);
        }
        if(!modeloListaExcel.isEmpty()){
            btnQuitarExcel.setEnabled(true);
            btnBorrarExcel.setEnabled(true);
            btnImportar.setEnabled(true);
        }else{
            btnImportar.setEnabled(false);
        }
    }//GEN-LAST:event_tablasSelExcelActionPerformed

    private void tablasCompletasExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tablasCompletasExcelActionPerformed
        btnQuitarExcel.setEnabled(false);
        btnBorrarExcel.setEnabled(false);
        btnAgregarHoja.setEnabled(false);
        seleccionHojasExcel.setEnabled(false);
        jScrollPaneSel1.getVerticalScrollBar().setEnabled(false);
        btnTipos.setEnabled(true);
        btnImportar.setEnabled(true);
    }//GEN-LAST:event_tablasCompletasExcelActionPerformed

    private void btnImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarActionPerformed
        if(btnImportar.getText().equals("Cancelar importación")){
            genBD.cancel(true);
        }else{
            String nombreBase = "";
            try{
                nombreBase = (String)JOptionPane.showInputDialog(
                    this,
                    "Escribe el nombre de la nueva base de datos:\n",
                    "Crear base de datos",
                    JOptionPane.PLAIN_MESSAGE,
                    null,           // ícono
                    null,           // opciones del combo box
                    "Nombre nuevo"  // texto dentro del campo
                );
                //System.out.println("Nombre de la base de datos: "+nombreBase);
                if(nombreBase.length()>0){ // comprobar que el usuario escriba algo
                    mat = patron.matcher(nombreBase);
                    if(mat.matches()){
                        //System.out.println("Regexp encontrada");
                        // crear la base de datos
                        importarArchivo(nombreBase);
                    }else{
                        //System.err.println("Regexp no encontrada");
                        throw new Exception();
                    }
                }else{
                    throw new Exception();
                }
            }catch(NullPointerException e){
            }
            catch(Exception e){
                //e.printStackTrace();
                JOptionPane.showMessageDialog(
                    this, 
                    "No se encontró un nombre válido. El nombre sólo "
                    + "\npuede estar formado por letras, números y "
                    + "\ncaracteres de subrayado(_).",
                    "No se puede crear la base de datos", 
                    JOptionPane.WARNING_MESSAGE
                );
            }
        }
    }//GEN-LAST:event_btnImportarActionPerformed

    private void btnAgregarHojaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarHojaActionPerformed
        if(!listaHojas.get(comboHojas.getSelectedIndex()).getSeleccionado()){  
            // new ElementoLista----------------¬
            modeloListaExcel.addElement(new TablaLista(comboHojas.getSelectedItem().toString(),comboHojas.getSelectedIndex()));
            seleccionHojasExcel.setSelectedIndex(modeloListaExcel.getSize()-1);
            listaHojas.get(comboHojas.getSelectedIndex()).setSeleccionado(true);
            /*for(int i=0;i<listaHojas.size();i++){
                System.out.print("["+listaHojas.get(i).getSeleccionado()+"]");
            }System.out.println();*/
            labelSelTablaExcel.setText("Tabla agregada a la lista de importación");
            btnQuitarExcel.setEnabled(true);
            btnBorrarExcel.setEnabled(true);
        }   
        btnTipos.setEnabled(true);
        btnAgregarHoja.setEnabled(false);
        btnImportar.setEnabled(true);
    }//GEN-LAST:event_btnAgregarHojaActionPerformed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        int opc = 100;
        SelectorApertura sa = new SelectorApertura();
        
        if(modeloListaExcel.isEmpty()){
            opc = sa.showOpenDialog(jPanel1);
        }
        if(!modeloListaExcel.isEmpty()&&limpiarSeleccion("hojas",modeloListaExcel,
            listaHojas,btnQuitarExcel,btnBorrarExcel,labelSelTablaExcel)==0){
            opc = sa.showOpenDialog(jPanel1);
        }
        
        if(opc == JFileChooser.APPROVE_OPTION){
            try{
                nomArch = sa.getSelectedFile().getName();
                rutaArch = sa.getSelectedFile().getPath();
                File archivo = new File(rutaArch);
                //System.out.println("Tamaño del archivo: " + archivo.length());
                if(archivo.length()==0){                   
                    reiniciarElementosImportacion();
                    JOptionPane.showMessageDialog(
                        this, nomArch+"\nEl archivo no tiene información.  ", 
                        "No se puede leer el archivo", JOptionPane.WARNING_MESSAGE
                    );
                }else{
                    limpiarPantallaImportacion();
                    lector = new LectorExcel(this,comboHojas,tablaExcel,labelRegExcel,labelArchivo,btnAbrir,rutaArch,nomArch,btnTipos,listaHojas,btnImportar,tablasCompletasExcel,tablasSelExcel);
                    lector.execute();

                    new Thread(){ // esperar a que se cargue el archivo para obtener el número de hojas
                        @Override
                        public void run(){
                            while(lector.getLibro()==null){
                                //System.out.println("Esperando libro");
                            }
                            //System.out.println("Libro cargado");
                        }
                    }.start();
                    //labelArchivo.setText("  " + nomArch );  
                }
            }catch(Exception e3){
                e3.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void limpiarPantallaImportacion(){
        labelArchivo.setText("");
        tablaExcel.setModel(new DefaultTableModel());
        comboHojas.removeAllItems();
        comboHojas.setEnabled(false);
        btnAbrir.setEnabled(false);
        btnTipos.setEnabled(false);
        btnAgregarHoja.setEnabled(false);
        btnImportar.setEnabled(false);
        tablasCompletasExcel.setSelected(true);
        tablasCompletasExcel.setEnabled(false);
        tablasSelExcel.setEnabled(false);
        infoImport.setText("Progreso de importación");
        barraProgresoImport.setValue(0);
        btnReporte.setEnabled(false);    
        listaHojas.clear();
        if(lector!=null && lector.getLibro()!=null){
            lector.cerrarArchivo();
        }                  
        labelSelTablaExcel.setText("");
        //rep.getTextArea().setText("");
    }
    
    private void btnTiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTiposActionPerformed
        TablaLista tabla;
        /*System.out.println("Información - número de hojas: " +listaHojas.size());
        for(int i=0;i<listaHojas.size();i++){
            tabla = listaHojas.get(i);
            tabla.mostrarColumnas();
            System.out.println();
        }*/
        String nomTabla = listaHojas.get(comboHojas.getSelectedIndex()).getNombre();
        ArrayList<InfoColumna> columnas = listaHojas.get(comboHojas.getSelectedIndex()).obtenerColumnas();
        new ConfiguracionTipos(this,true,nomTabla,columnas).setVisible(true);
    }//GEN-LAST:event_btnTiposActionPerformed

    private void btnReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteActionPerformed
        rep.setVisible(true);
    }//GEN-LAST:event_btnReporteActionPerformed

    /**
     * Método encargado de intentar realizar la conexión con el servidor de BD
     * con los datos proporcionados por el usuario. 
     * Si la conexión se realiza de forma exitosa, el programa muestra la 
     * pantalla que permite exportar una base de datos en un archivo Excel. 
     * Si la conexión no se puede realizar, se muestra un mensaje de error en la
     * pantalla inicial.
     * param evt Evento generado al presionar el botón 'Conectar'. 
     */
    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        mensaje = "Estableciendo conexión con el servidor...";
        msj.setText(mensaje);
        btnConectar.setEnabled(false);
        servidor = txtServidor.getText();
        usuario = txtUsuario.getText();
        clave = txtClave.getText();
        new Thread(){
            @Override
            public void run(){
                try{
                    conn = new Conexion(servidor,usuario,clave); // Conectar con el servidor
                    cargarListaDeBases(); // obtener los nombres de las bases del servidor
                    cardLayout.show(jPanel1, "card3"); // cambiar a la pantalla de exportación
                }catch(SQLException sqle){
                    mensaje += "\nFalló el intento de conexión. "
                    + "\nError MySQL " + sqle.getErrorCode()+": "+sqle.getMessage()+".";
                    if(sqle.getErrorCode()==1045){
                        mensaje += "\nDatos de conexión incorrectos, verifique e intente de nuevo.";
                    }
                }catch(ClassNotFoundException cnf){
                    //cnf.printStackTrace();
                    mensaje += "\nFalló el intento de conexión."
                    + "\nNo se pudo encontar la librería mysql-conector-java";
                }finally{
                    msj.setText(mensaje);
                    btnConectar.setEnabled(true);
                }
            }
        }.start();
    }//GEN-LAST:event_btnConectarActionPerformed

    private void cerrarVentana(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_cerrarVentana
        //System.out.println(generadorArch.estaActivo());
        //System.out.println(genBD.estaActivo());
        
        Object [] opciones ={"Aceptar","Cancelar"};
        //System.out.println("generadorArch.getState(): "+generadorArch.getState());
        //System.out.println("genBD.getState(): "+genBD.getState());
        if((generadorArch.getState()==StateValue.STARTED)||(genBD.getState()==StateValue.STARTED)){    
            int eleccion = JOptionPane.showOptionDialog(
                this,
                "Hay procesos ejecutándose, ¿desea cerrar el programa?  ",
                "Confirmar cierre",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,null,opciones,"Aceptar"
            );
            if (eleccion == JOptionPane.YES_OPTION){
                System.exit(0);
            }
        }else{
            System.exit(0);
        }
    }//GEN-LAST:event_cerrarVentana

    private void btnImportMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnImportMouseEntered
        guardar_bd.setIcon(new ImageIcon(getClass().getResource("/imagenes/btn2_1.png")));
        guardar_excel.setIcon(new ImageIcon(getClass().getResource("/imagenes/btn1_1.png")));
    }//GEN-LAST:event_btnImportMouseEntered

    private void btnExportarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExportarMouseEntered
        guardar_excel.setIcon(new ImageIcon(getClass().getResource("/imagenes/btn1.png")));
        guardar_bd.setIcon(new ImageIcon(getClass().getResource("/imagenes/btn2.png")));
    }//GEN-LAST:event_btnExportarMouseEntered

    private void btnExportarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExportarMouseExited
        if(modo==IMP){
            guardar_excel.setIcon(new ImageIcon(getClass().getResource("/imagenes/btn1_1.png")));
            guardar_bd.setIcon(new ImageIcon(getClass().getResource("/imagenes/btn2_1.png")));
        }
    }//GEN-LAST:event_btnExportarMouseExited

    private void btnImportMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnImportMouseExited
        if(modo==EXP){
            guardar_excel.setIcon(new ImageIcon(getClass().getResource("/imagenes/btn1.png")));
            guardar_bd.setIcon(new ImageIcon(getClass().getResource("/imagenes/btn2.png")));
        }
    }//GEN-LAST:event_btnImportMouseExited
        
    public void importarArchivo(String nombre){
        List<TablaLista> listaHojasImportar;
        btnReporte.setEnabled(true);
        if(tablasCompletasExcel.isSelected()){
            listaHojasImportar = listaHojas; 
        }else{
            listaHojasImportar = listaHojas.stream()
                .filter(elemento->elemento.getSeleccionado())
                .collect(Collectors.toList());
        }
        try{
            genBD =  new GeneradorBD(conn,lector,nombre,listaHojasImportar,infoImport,btnImportar,barraProgresoImport,rep.getTextArea());
            genBD.execute();           
        }catch(Exception e){
            e.printStackTrace();
        }
    }  
    
    public <T extends ElementoLista> void borrarElemento(JList seleccion,DefaultListModel modeloLista,ArrayList<T> lista,JLabel label,JButton btnQuitar,JButton btnBorrar,JButton btnOperacion,String msj,String msjPlural){
        int []elemBorrados = seleccion.getSelectedIndices(); // posiciones de los elementos a eliminar
        int acomodo = 0;    // para el desfase que ocurre al eliminar elementos de la lista
        for(int t:elemBorrados){     
            ElementoLista elemento = (ElementoLista)modeloLista.getElementAt(t-acomodo);      
            lista.get(elemento.getPosicion()).setSeleccionado(false);
            for(int i=0;i<lista.size();i++){
                System.out.print("["+lista.get(i).getSeleccionado()+"]");
            }System.out.println();
            modeloLista.remove(t-acomodo);
            //System.out.println(t-acomodo);
            acomodo++;
        }
        if(elemBorrados.length>1){  // si se seleccionaron varios elementos para borrarlos
            label.setText(msjPlural);
            if(!modeloLista.isEmpty()){
                seleccion.setSelectedIndex(0);
            }
        }else{ // solo se elimina un elemento
            label.setText(msj);
            //System.out.println(elemBorrados[0]);
            //System.out.println(modeloLista.getSize()-1);
            if(elemBorrados[0]==modeloLista.getSize()){   // si el elemento borrado es el último de la lista
                seleccion.setSelectedIndex(modeloLista.getSize()-1); // se selecciona el elemento anterior al eliminado
            }else{
                seleccion.setSelectedIndex(elemBorrados[0]);    // selec. el elemento sig a eliminado
            }
        }
        if(modeloLista.isEmpty()){
            btnQuitar.setEnabled(false);
            btnBorrar.setEnabled(false);
            btnOperacion.setEnabled(false); 
        }
    }
    
    public void guardarArchivo(){ 
        try {
            String bd = comboBases.getSelectedItem().toString(); 
            Conexion con2 = new Conexion(servidor,usuario,clave);
            List<ElementoLista> lista;
            if(tablasCompletas.isSelected()){
               lista = listaElementos; 
            }else{
                lista = listaElementos.stream()
                    .filter(elemento->elemento.getSeleccionado())
                    .collect(Collectors.toList());
            }
            generadorArch = new GeneradorExcel(con2, bd, lista, info, barraProgreso, this, btnExportar);
            String directorio = FileSystemView.getFileSystemView().getDefaultDirectory().getPath();
            SelectorGuarda sg = new SelectorGuarda(new File(directorio+"\\"+bd+".xlsx"),generadorArch);
            //sg.showSaveDialog(jPanel1);
            if(sg.showSaveDialog(jPanel1)==JFileChooser.CANCEL_OPTION){
                System.out.println("Cancelando");
                btnExportar.setEnabled(true);
            }else{
                System.out.println("Aceptando");
            }
            
        } catch (ClassNotFoundException ex) {
            info.setText("nNo se pudo encontar la librería mysql-conector-java...");
        } catch (SQLException ex) {
            info.setText("No se pudo cargar la información del servidor "
            + "(Error MySQL " + ex.getErrorCode() + ": " + ex.getMessage() + ".");
        }
    }
    
    public <T extends ElementoLista> int limpiarSeleccion(String elemento,DefaultListModel modeloLista,
            ArrayList<T> listaAux,JButton btnQuitar,JButton btnBorrar,JLabel label){
        int resp = JOptionPane.showConfirmDialog(
            jPanel1, 
            "Todas las "+elemento+" en la lista se \nborrarán. ¿Continuar?",
            "¿Borrar todo?", 
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );
        if(resp==JOptionPane.OK_OPTION){                
            ElementoLista elem;
            for(int i=modeloLista.getSize()-1; i>=0; i--){
                elem = (ElementoLista)modeloLista.getElementAt(i);
                listaAux.get(elem.getPosicion()).setSeleccionado(false);
            }
            /*System.out.println("Borrados todos los elementos");
            for(int k=0;k<listaAux.size();k++){
                System.out.print("["+listaAux.get(k).getSeleccionado()+"]");
            }System.out.println();*/
            modeloLista.clear();
            btnBorrar.setEnabled(false);
            btnQuitar.setEnabled(false);
            label.setText("Selección de "+elemento+" borrada");
        }
        return resp;
    }
    
    public void reiniciarCamposInicio(){
        txtServidor.setText("");
        txtUsuario.setText("");
        txtClave.setText("");
        mensaje = "Conexión terminada.";
        msj.setText(mensaje);
        btnConectar.setEnabled(true);
    }
    
    public void cargarListaDeBases(){
        try{
            ArrayList<String>lista = conn.obtenerBasesDeDatos();
            lista.stream().forEach((String nomBase) -> {
                comboBases.addItem(nomBase);
            });
        }catch(SQLException e){
            info.setText("No se pudo cargar la información del servidor "
            + "(Error MySQL " + e.getErrorCode() + ": " + e.getMessage() + ".");
        }catch(Exception ex){
            info.setText("No se pudo cargar la información del servidor ("+ex.getMessage()+")");
            ex.printStackTrace();
        }
    }
    
    public void cargarListaDeTablas(String nomBase){
        try{
            listaElementos = conn.obtenerTablas(nomBase);
            listaElementos.stream().forEach(new Consumer<ElementoLista>(){
                @Override
                public void accept(ElementoLista e1) {
                    comboTablas.addItem(e1.getNombre());
                }
            });
        }catch(SQLException e){
            info.setText("No se pudo cargar la información "
            + "(Error MySQL " + e.getErrorCode() + ": " + e.getMessage() + ".");
        }catch(Exception ex){
            info.setText("No se pudo cargar la lista de tablas en la base de datos "
            + comboBases.getSelectedItem()+" ("+ex.toString()+")");
            ex.printStackTrace();
        }
    }
    
    public void cargarDatos(String nomBase,String nomTabla){
        try{
            formato = new FormatoTabla(tabla,conn,nomBase,nomTabla,labelRegistros);
            formato.execute();
        }catch(SQLException e){
            info.setText("No se pudo cargar la información "
            + "(Error MySQL " + e.getErrorCode() + ": " + e.getMessage() + ".");
        }catch(Exception ex){
            info.setText("No fue posible cargar los registros de la tabla "
                +comboTablas.getSelectedItem()+" ("+ex.toString()+")");
            ex.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // LookAndFeel nativo
        try {    
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            System.err.println(ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazGrafica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barraProgreso;
    private javax.swing.JProgressBar barraProgresoImport;
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnAgregarHoja;
    private javax.swing.JButton btnAgregarTabla;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnBorrarExcel;
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnImportar;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JButton btnQuitarExcel;
    private javax.swing.JButton btnReporte;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnTipos;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox comboBases;
    private javax.swing.JComboBox comboHojas;
    private javax.swing.JComboBox comboTablas;
    private javax.swing.JButton guardar_bd;
    private javax.swing.JButton guardar_excel;
    private javax.swing.JLabel info;
    private javax.swing.JLabel infoImport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPaneSel;
    private javax.swing.JScrollPane jScrollPaneSel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelArchivo;
    private javax.swing.JLabel labelRegExcel;
    private javax.swing.JLabel labelRegistros;
    private javax.swing.JLabel labelSelTabla;
    private javax.swing.JLabel labelSelTablaExcel;
    private javax.swing.JTextArea msj;
    private javax.swing.JPanel panelExport;
    private javax.swing.JPanel panelImport;
    private javax.swing.JList seleccionHojasExcel;
    private javax.swing.JList seleccionTablas;
    private javax.swing.JTable tabla;
    private javax.swing.JTable tablaExcel;
    private javax.swing.JRadioButton tablasCompletas;
    private javax.swing.JRadioButton tablasCompletasExcel;
    private javax.swing.JRadioButton tablasSel;
    private javax.swing.JRadioButton tablasSelExcel;
    private javax.swing.JPasswordField txtClave;
    private javax.swing.JTextField txtServidor;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
